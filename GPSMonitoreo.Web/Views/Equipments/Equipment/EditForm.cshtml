@{
	Layout = "_AppLayoutTabbedForm3";

	var layoutModel = new GPSMonitoreo.Web.ViewModels.AppLayoutForm(this.ViewContext);

	layoutModel.Title = "EQUIPOS::EQUIPO";

	ViewData["layoutModel"] = layoutModel;

	var groups = ViewData["groups"] as List<CommonDbEntitySimpleListDto<byte>>;
	var groupsJson = groups.PrependBlankItem().ToJsonString();

	var brands = ViewData["brands"] as List<CommonDbEntitySimpleListDto<short>>;
	var brandsJson = brands.PrependBlankItem().ToJsonString();

	var operationStatus = ViewData["operationStatus"] as List<CommonDbEntitySimpleListDto<byte>>;
	var operationStatusJson = operationStatus.PrependBlankItem().ToJsonString();

}

<script script-manager-add="commonform" script-manager-key="form_init">
	layout.addFormInitializer(function(form){

		var f = form.formElement;
		
		var $form = form.$form;

		var $grid = this.container.find('#@(layoutModel.FormId)_Capabilities');

		form.add('#@(layoutModel.FormId)_GroupId', 'jqxDropDownList', {placeHolder: '', valueMember: 'Id', displayMember: 'Description', source: @Html.Raw(groupsJson)});

        //toma la propiedad de id marca
	    var $brand = $form.find('#@(layoutModel.FormId)_BrandId');
	   form.add($brand, 'jqxDropDownList', {placeHolder: '', valueMember: 'Id', displayMember: 'Description', source: @Html.Raw(brandsJson)});

		
		var model = form.addSingle('#@(layoutModel.FormId)_ModelId', 'jqxDropDownList', {placeHolder: '', valueMember: 'Id', displayMember: 'Description'});

		
		form.add('#@(layoutModel.FormId)_OperationalStatusId', 'jqxDropDownList', {placeHolder: '', valueMember: 'Id', displayMember: 'Description', source: @Html.Raw(operationStatusJson)});

		var category = form.addTreeDropDown('#@(layoutModel.FormId)_CategoryId', {}, @Html.Raw(ViewData["categories"]));

		//Al hacer click sobre la marca, filtrar los modelos
		$brand.on('change', function(evt){
			model.clear();
			model.setContent('');
			var brandId = evt.args.item.value;
			var variabw244 = 'Elige algo pujed';
			if(!brandId) 
			    return ;

			Ajax.get('/equipments/equipment/models/' + brandId, function(response){
				model.host.jqxDropDownList({source: response.records});
			});
		});

		form.add([f.elements.AlternateId, f.elements.Plate, f.elements.SerialNumber], 'jqxInput');

		form.add([f.elements.ManufactureYear], 'jqxNumberInput', {inputMode: 'simple', spinButtons: false, spinButtonsStep: 0, digits: 4, decimalDigits: 0, textAlign: 'left'});


		var arreglo_unidades = @Html.Raw(ViewData["arreglo_unidades"]);
		var arreglo_caps_unidades = @Html.Raw(ViewData["arreglo_caps_unidades"]);


		function obtenerIdUnidad(arreglo, idCapacidad)
		{

			var idUnidad = 0;
			$.each(arreglo, function(key, obj) {

				if(obj.Key == idCapacidad)
				{
					idUnidad = obj.Value;
					////console.log(obj);
					return idUnidad;
				}
			});

			return idUnidad;

		}

		function obtenerLabelUnidad(arreglo, idUnidad)
		{

			var lblUnidad = '';

			$.each(arreglo, function(key, obj) {
				if(obj.Key == idUnidad)
				{
					lblUnidad = obj.Value;
					////console.log(obj);
					return lblUnidad;
				}
			});

			return lblUnidad;

		}

		
		var productCategory;
		var capability;
		

		var grid;

		var gridOptions = AppGrid2.getDefaultOptions();

		gridOptions.$element = $grid;

		gridOptions.mode = 'edit';

		gridOptions.showToolBar = true;
		gridOptions.showAddButton = true;
		gridOptions.showRemoveButton = true;
		gridOptions.selectionMode = 'checkbox';

		gridOptions.dataFields = [
			{ name: 'ProductCategoryId', type: 'number' },
			{ name: 'ProductCategoryDescription', type: 'string'},
			{ name: 'CapabilityId', type: 'number' },
			{ name: 'CapabilityDescription', type: 'string'},
			{ name: 'MeasureUnitDescription', type: 'string' },
			{ name: 'Value', type: 'number' }
		];

		gridOptions.columns = [
			{ text: 'Categoria Producto',  width: 250,  columntype: 'template', datafield: 'ProductCategoryDescription',
				createeditor: function (row, value, editor) {

					productCategory = jqxCreateTreeDropDown(editor, {}, @Html.Raw(ViewData["productCategories"]), function(item) {
						grid.source.records[grid._editingRowIndex].ProductCategoryId = item.value;
					});
				},
				initeditor: function (row, cellvalue, editor, celltext, pressedChar) {
					var value = grid.source.records[row].ProductCategoryId;

					if(value === null || value === 0)
					{
						productCategory.reset();
					}
					else
					{
						var item = productCategory.tree.getItemByValue(value);
						productCategory.tree.val(item);
						productCategory.tree.selectItem(item);
					}
				}
			},
			{ text: 'Capacidad', width: 350, columntype: 'template', datafield: 'CapabilityDescription',
				createeditor: function (row, value, editor)	{
					capability = jqxCreateTreeDropDown(editor, {}, @Html.Raw(ViewData["equipmentCapabilities"]), function(item) {
						var idItemCapacidad = item.value;
						var objCapacidad = capability.tree.getItemByValue(idItemCapacidad);
						var idUnidad = obtenerIdUnidad(arreglo_caps_unidades, objCapacidad.value);
						valorUnidad = obtenerLabelUnidad(arreglo_unidades, idUnidad);

						grid.source.records[grid._editingRowIndex].CapabilityId = item.value;
						grid.setcellvalue(grid._editingRowIndex, 'MeasureUnitDescription', valorUnidad);
						grid.begincelledit(grid._editingRowIndex, 'Value');
					});
				},
				initeditor: function (row, cellvalue, editor, celltext, pressedChar) {
					var value = grid.source.records[row].CapabilityId;
					if(value !== null)
					{
						var item = capability.tree.getItemByValue(value);
						capability.tree.val(item);
						capability.tree.selectItem(item);
						capability.setDropDownContent(item.label);
					}
				}
			},
			{ text: 'Unidad', datafield: 'MeasureUnitDescription', width: 200, cellsalign: 'left', columntype: 'textbox', editable: false },
			{ text: 'Valor', datafield: 'Value', width: 70, cellsalign: 'left', columntype: 'numberinput', 
				createeditor : function (row, cellvalue, editor) {
					editor.jqxNumberInput({ decimalDigits: 2, digits: 6, spinButtons: false, min: 0});
				}
			}
		];

		gridOptions.customVal = function(value)
		{
			if(value === undefined)
			{
				var rows = this.source.records;
				var row;
				var newRows = [];
				
				for(var x = 0; x < rows.length; x++)
				{
					row = rows[x];
					newRows.push({ProductCategoryId: row.ProductCategoryId, CapabilityId: row.CapabilityId, Value: row.Value});
				}
				return newRows;
			}
			else
			{
				this.refreshLocalData(value);
			}
		};

		grid = (new AppGrid2(gridOptions)).grid;

		form.addWidget(grid);
	});
</script>

<formsection form-manager="commonform" form-manager-section="section1">
	<tr>
		<td>Código Alterno</td>
		<td><input name="AlternateId" maxlength="10"  /></td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Grupo</td>
		<td>
			<div id="@(layoutModel.FormId)_GroupId" field_name="GroupId"></div>
		</td>
		<td></td>
		<td>Categoria</td>
		<td>
			<div id="@(layoutModel.FormId)_CategoryId" field_name="CategoryId"><div style="border: none;"></div></div>
		</td>
	</tr>
</formsection>

<formsection form-manager="commonform" form-manager-section="section2">
	
	<tr>
		<td>Estado Operación</td>
		<td>
			<div id="@(layoutModel.FormId)_OperationalStatusId" field_name="OperationalStatusId"></div>
		</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Marca</td>
		<td><div id="@(layoutModel.FormId)_BrandId" field_name="BrandId"></div></td>
		<td></td>
		<td>Modelo</td>
		<td><div id="@(layoutModel.FormId)_ModelId" field_name="ModelId"></div></td>
	</tr>
	<tr>
		<td>A&ntilde;o</td>
		<td><input name="ManufactureYear" /></td>
		<td></td>
		<td>Placa</td>
		<td><input name="Plate" maxlength="10"  /></td>
	</tr>
	<tr>
		<td>No. Serie</td>
		<td><input name="SerialNumber" maxlength="30"   /></td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	
	
</formsection>


@section tabtitles{
	<li>Capacidades</li>
}

@section tabs{
	<div><div id="@(layoutModel.FormId)_Capabilities" field_name="Capabilities"></div></div>
}
